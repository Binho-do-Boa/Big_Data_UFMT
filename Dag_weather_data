from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from airflow.utils.dates import days_ago
from datetime import datetime
import pandas as pd
import requests
import csv
import os
import pytz

# Função para buscar dados da API e atualizar o CSV
def fetch_and_update_weather_data():
    api_key = ""  # Substitua pela sua chave da API
    city = ""  # Cidade para a consulta
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"

    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        # Convertendo a temperatura para graus Celsius e arredondando para 2 casas decimais
        temperature_kelvin = data['main']['temp']
        temperature_celsius = round(temperature_kelvin - 273.15, 2)
        
        # Obtendo a descrição do clima
        weather_description = data['weather'][0]['description']
        
        # Obtendo data e hora da consulta no horário local de Cuiabá
        now_utc = datetime.now(pytz.utc)
        cuiaba_tz = pytz.timezone('America/Cuiaba')
        now_cuiaba = now_utc.astimezone(cuiaba_tz)
        date = now_cuiaba.strftime("%Y-%m-%d")
        time = now_cuiaba.strftime("%H:%M:%S")

        # Criando o arquivo CSV se não existir, e adicionando o cabeçalho
        file_exists = os.path.isfile('/opt/airflow/dags/temperatura.csv')
        with open('/opt/airflow/dags/temperatura.csv', mode='a', newline='') as file:
            writer = csv.writer(file)
            if not file_exists:
                writer.writerow(['Cidade', 'Temperatura', 'Clima', 'Data', 'Hora'])
            writer.writerow([city, temperature_celsius, weather_description, date, time])

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
}

dag = DAG(
    'weather_data',
    default_args=default_args,
    description='Dados Temperatura',
    schedule_interval='@hourly',
    start_date=days_ago(1),
    catchup=False,
)

task = PythonOperator(
    task_id='fetch_and_update_weather_data',
    python_callable=fetch_and_update_weather_data,
    dag=dag,
)

task
